
# -------------------------------------------------------------------------------

TAF_PATH    :=/usr/local/taf/cpp_master

# -------------------------------------------------------------------------------

#export LC_ALL   = zh_CN.GB2312
#export LANG     = zh_CN.GB2312

#-------------------------------------------------------------------------------

CC          = gcc
CXX         = g++
CFLAGSG   	= $(CFLAGS) -g -fPIC -Wno-deprecated -Wall -std=c++11
CFLAGSO2   	= $(CFLAGS) -O2 -fPIC -fno-strict-aliasing -Wno-deprecated -Wall -std=c++11
 #-pg

#-------------------------------------------------------------------------------

JCE2CPP     := ${TAF_PATH}/tools/jce2cpp ${J2CPP_FLAG}

#-------------------------------------------------------------------------------

JCE_SRC     := $(wildcard *.jce)
JCE_H       := $(patsubst %.jce,%.h, $(JCE_SRC))
JCE_INTER   := $(if $(JCE_SRC), $(shell grep -ls interface $(JCE_SRC)))
JCE_CPP     := $(patsubst %.jce,%.cpp, $(JCE_INTER))
JCE_OBJ     := $(patsubst %.jce,%.o, $(JCE_INTER))

LOCAL_SRC   += $(sort $(wildcard *.cu *.cpp *.c) $(JCE_CPP))

LOCAL_OBJ   += $(patsubst %.cu,%.o, $(patsubst %.cpp,%.o, $(patsubst %.c,%.o, $(LOCAL_SRC))))
DEP_FILE    := $(foreach obj, $(LOCAL_OBJ), $(dir $(obj)).$(basename $(notdir $(obj))).d)

#-------------------------------------------------------------------------------

MYSQL_INC    	+= -I/usr/local/mysql/include/mysql -I/usr/local/mysql/include -I/usr/include/mysql
INCLUDE     	+= -I${TAF_PATH}/include -I./ ${MYSQL_INC} -std=c++11

MYSQL_LIB_DIR   := -L/usr/local/mysql/lib -L/usr/lib/mysql
LIB_DIR         := -lpthread ${MYSQL_LIB_DIR} -L${TAF_PATH}/lib -ldl

LIB_64_g       	:= ${LIB_DIR} -ltafservant.debug -ltafutil.debug -lmysqlclient 
LIB_64_O2       := ${LIB_DIR} -ltafservant -ltafutil -lmysqlclient 

#----------------------------------------------------------------------------------

TAF_WEB_SERVER  := upchina@taf.test.whup.com
TAF_WEB_HOST    := taf.test.whup.com:8080

#----------------------------------------------------------------------------------

include ${TAF_PATH}/makefile/make.rules.lp64

#-------------------------------------------------------------------------------

all : $(JCE_H) $(JCE_CPP) $(LOCAL_OBJ) $(TARGET) $(TARGETS) FORSTRIP

#-------------------------------------------------------------------------------

ifeq ($(DFLAGS),all)

$(filter %.a,$(TARGET_64_g)) : $(LOCAL_OBJ_64_g)
	ar r $@ $(LOCAL_OBJ_64_g)

$(filter %.a,$(TARGET_64_O2)) : $(LOCAL_OBJ_64_O2) 
	ar r $@ $(LOCAL_OBJ_64_O2)

$(filter %.so,$(TARGET_64_g)) : $(LOCAL_OBJ_64)
	$(CC) -m64 $(CFLAGSG) -shared -o $@ $(LOCAL_OBJ_64_g) $(LIB) $(LIB_64_g)

$(filter %.so,$(TARGET_64_O2)) : $(LOCAL_OBJ_64)
	$(CC) -m64 $(CFLAGSO2) -shared -o $@ $(LOCAL_OBJ_64_O2) $(LIB) $(LIB_64_O2)

else
ifeq ($(DFLAGS),O2)

$(filter %.a,$(TARGET)) : $(LOCAL_OBJ_64_O2) 
	ar r $@ $(LOCAL_OBJ_64_O2)

$(filter %.so,$(TARGET)) : $(LOCAL_OBJ_64_O2)
	$(CC) -m64 $(CFLAGSO2) -shared -o $@ $(LOCAL_OBJ_64_O2) $(LIB) $(LIB_64_O2)

$(filter-out %.so %.a,$(TARGET)) : $(LOCAL_OBJ_64_O2)
	$(CXX) -m64 $(CFLAGSO2) -o $@ $^ $(INCLUDE) $(LIB) $(LIB_64_O2)

$(filter-out %.so %.a %.y,$(TARGETS)) : % : %.$(MFLAGS).64.O2.o
	$(CXX) -m64 $(CFLAGSO2) -o $@ $^ $(INCLUDE) $(LIB) $(LIB_64_O2)

else

$(filter %.a,$(TARGET)) : $(LOCAL_OBJ_64_g) 
	ar r $@ $(LOCAL_OBJ_64_g)

$(filter %.so,$(TARGET)) : $(LOCAL_OBJ_64_g)
	$(CC) -m64 $(CFLAGSG) -shared -o $@ $(LOCAL_OBJ_64_g) $(LIB) $(LIB_64_g) 

$(filter-out %.so %.a,$(TARGET)) : $(LOCAL_OBJ_64_g) 
	$(CXX) -m64 $(CFLAGSG) -o $@ $^ $(INCLUDE) $(LIB) $(LIB_64_g) 

$(filter-out %.so %.a %.y,$(TARGETS)) : % : %.$(MFLAGS).64.g.o
	$(CXX) -m64 $(CFLAGSG) -o $@ $^ $(INCLUDE) $(LIB) $(LIB_64_g) 

endif

endif

FORSTRIP:$(TARGET_64_g) $(TARGET) $(TARGETS)
ifeq ($(STRIP_FLAG),Y)
	@strip $(TARGET_64_g) $(TARGET) $(TARGETS)
endif

#----------------------------------------------------------------------------------

copyfile = if test -z "$(APP)" || test -z "$(TARGET)"; then \
               echo "['APP' or 'TARGET' option is empty.]"; exit 1; \
           	else \
		       	if test ! -d $(2); then \
              			echo "[No such dir:$(2), now we create it.]";\
    				mkdir -p $(2);\
			fi; \
                        if test ! -z "$(strip $(1))"; then \
	          		echo "[Copy file ($(1)) -> $(2)]"; \
       		  		cp -v $(1) $(2); \
			fi; \
		fi;
#----------------------------------------------------------------------------------

#ifneq ($(JCE_SRC),)
$(JCE_H) $(JCE_CPP) : $(JCE_SRC)
	@echo "${JCE2CPP}"
	rm -vf $(JCE_H) $(JCE_CPP) $(JCE_OBJ)
	@echo "${JCE2CPP} ${J2CPP_FLAG} "
	$(JCE2CPP) ${J2CPP_FLAG} $(JCE_SRC)

#endif
#----------------------------------------------------------------------------------

tar: $(TARGET) $(CONFIG)
	@if [ -d $(TARGET)_tmp_dir ]; then \
		echo "dir has exist:$(TARGET)_tmp_dir, abort."; \
		exit 1; \
	else \
		mkdir $(TARGET)_tmp_dir $(TARGET)_tmp_dir/$(TARGET);\
		cp -rf $(TARGET) $(CONFIG) $(TARGET)_tmp_dir/$(TARGET)/; \
		cd $(TARGET)_tmp_dir; tar --exclude=".svn" --exclude="_svn" -czvf $(TARGET).tgz $(TARGET)/; cd ..; \
		if [ -f "$(TARGET).tgz" ]; then \
			mv -vf $(TARGET).tgz $(TARGET).`date +%Y%m%d%H%M%S`.tgz; \
		fi; \
		mv $(TARGET)_tmp_dir/$(TARGET).tgz ./; \
		rm -rf $(TARGET)_tmp_dir; \
		echo "tar cvfz $(TARGET).tgz ..."; \
	fi

#m       := "upload-by-developer"
#upload: tar
#	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
#	scp $(TARGET).tgz ${TAF_WEB_SERVER}:/usr/local/app/patchs/taf.upload/$(APP).$(TARGET).tgz
#	@if test -z "$(SET)" ; then \
#		wget -O /tmp/$(APP).$(TARGET).wget.out "http://${TAF_WEB_HOST}/doUpload.jsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patchs/taf.upload/$(APP).$(TARGET).tgz&UPLOADTEXT=${m}";\
#	else \
#		wget -O /tmp/$(APP).$(TARGET).wget.out "http://${TAF_WEB_HOST}/doUpload.jsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patchs/taf.upload/$(APP).$(TARGET).tgz&SET=$(SET)"; \
#	fi
#	@cat /tmp/$(APP).$(TARGET).wget.out

#TAF_WEB_HOST    := http://172.16.11.21:3000
#TAF_TOKEN 	:= ""
m	:= "upload-by-developer"
upload: tar
	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
	curl ${TAF_WEB_HOST}/api/upload_and_publish?ticket=${TAF_TOKEN} -Fsuse=@${TARGET}.tgz -Fapplication=${APP} -Fmodule_name=${TARGET} -Fcomment=developer-auto-upload
	@echo "\n---------------------------------------------------------------------------\n"	

HELP += $(HELP_TAR)

ifneq ($(JCE_SRC),)

SERVER_NAME := $(TARGET)
SERVER_DIR  := /home/tafjce/$(APP)/$(SERVER_NAME)
SERVER_OBJ  := $(foreach file, $(JCE_INTER),$(SERVER_DIR)/$(basename $(file)).o)
SERVER_OBJ	:= $(sort $(SERVER_OBJ))
RELEASE_JCE += $(JCE_SRC) $(JCE_H)

TARGET_LIB  := $(filter %.a,$(TARGET)) $(filter %.so,$(TARGET))
USER_H      +=
USER_OBJ    +=
USER_FILE   := $(USER_H) $(USER_OBJ)

release: $(JCE_H)
	echo lib:$(TARGET_LIB)
	@$(call copyfile, $(RELEASE_JCE) $(USER_FILE) [Mm]akefile , $(SERVER_DIR))
	@$(call copyfile, $(TARGET_LIB) , $(SERVER_DIR))
	echo "INCLUDE += -I$(SERVER_DIR)"  >  $(SERVER_DIR)/$(SERVER_NAME).mk;
	echo "LIB += -L$(SERVER_DIR)"  >>  $(SERVER_DIR)/$(SERVER_NAME).mk;

HELP += $(HELP_RELEASE)
endif

#----------------------------------------------------------------------------------

clean:
	rm -vf $(LOCAL_OBJ) ${JCE_OBJ) $(TARGET) $(TARGETS) ${CLEANFILE} .*.d.tmp gmon.out

cleanall:
	rm -vf $(LOCAL_OBJ) $(JCE_OBJ) $(JCE_H) $(JCE_CPP) $(TARGET) $(TARGETS) $(DEP_FILE) ${CLEANFILE} *.o .*.d.tmp .*.d gmon.out *.tgz

HELP += $(HELP_CLEAN)
HELP += $(HELP_CLEANALL)

ifneq ($(DEP_FILE),)
-include $(DEP_FILE)
endif

HELP_RELEASE  = "\n\e[1;33mrelease\e[0m:\t[copy '\e[1;32m$(JCE_SRC) $(JCE_H)\e[0m' -> '/home/tafjce/$(APP)/$(TARGET)']"
HELP_CLEAN    = "\n\e[1;33mclean\e[0m:\t\t[remove $(LOCAL_OBJ) $(TARGET)]"
HELP_CLEANALL = "\n\e[1;33mcleanall\e[0m:\t[clean & rm .*.d]"
HELP_TAR      = "\n\e[1;33mtar\e[0m:\t\t[will do 'tar $(TARGET).tgz $(RELEASE_FILE)']"

help:
	@echo -e $(HELP)"\n"

#-------------------------------------------------------------------------------

.%.64.g.d: %.cpp
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cpp/\.64.g.o:/ > $@; \
	$(CXX) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.g.o: %.cpp
	$(CXX) -m64 $(CFLAGSG) $(INCLUDE) -o $@ -c $<

.%.64.g.d: %.c
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.c/\.64.g.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.g.o: %.c
	$(CC) -m64 $(CFLAGSG) $(INCLUDE) -o $@ -c $<

.%.64.O2.d: %.cpp
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cpp/\.64.O2.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.O2.o: %.cpp
	$(CXX) -m64 $(CFLAGSO2) $(INCLUDE) -o $@ -c $<

.%.64.O2.d: %.c
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.c/\.64.O2.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.O2.o: %.c
	$(CC) -m64 $(CFLAGSO2) $(INCLUDE) -o $@ -c $<

.%.64.g.d: %.cu
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cu/\.64.g.o:/ > $@; \
	gcc -MM $(INCLUDE) $< | sed '1s/.*.://' >> $@;

%.64.g.o: %.cu
	$(NVCC) -m64 -dc $(NVCCFLAGS) $(INCLUDE) -o $@ -c $<

%.64.O2.o: %.cu
	$(NVCC) -m64 -dc $(NVCCFLAGS) $(INCLUDE) -o $@ -c $<


#----------------------------------------------------------------------------------

